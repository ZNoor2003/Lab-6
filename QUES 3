
#include "matrix.h"
#include <stdlib.h>
#include <stdio.h>

int main() {
    int mat1[2][2] = {{1, 2}, {5, 6}};
    int mat2[2][2] = {{1, 2}, {5, 6}};

    printf("On Addition\n");
    int* mat3 = add(mat1, 2, 2, mat2, 2, 2);
    print_mat(mat3, 2, 2);
    free(mat3);

    printf("\nOn Multiplication\n");
    int* mat4 = mul(mat1, 2, 2, mat2, 2, 2);
    print_mat(mat4, 2, 2);
    free(mat4);

    printf("\nOn Transposition\n");
    int* mat5 = transpose(mat1, 2, 2);
    print_mat(mat5, 2, 2);
    free(mat5);

    printf("\nDeterminant of mat1\n");
    int num = determinant(mat1, 2, 2);
    printf("Determinant = %d", num);

    return 0;
}

#ifndef MATRIX_h
#define MATRIX_h

int* add(int* mat1, int r1, int c1, int* mat2, int r2, int c2);
int* mul(int* mat1, int r1, int c1, int* mat2, int r2, int c2);
int* transpose(int* mat1, int r, int c);
int determinant(int* mat, int r, int c);
void print_mat(int* mat, int r, int c);

#endif


int* add(int* mat1, int r1, int c1, int* mat2, int r2, int c2) {
    if (c1 == c2 && r1 == r2) {
        int* mat3 = (int*)malloc(r1 * c1 * sizeof(int));
        int* ptr = mat3;

        for (int i = 0; i < r1; i++) {
            for (int j = 0; j < c1; j++) {
                *ptr = mat1[i * c1 + j] + mat2[i * c2 + j];
                ptr++;
            }
        }

        return mat3;
    }

    return NULL;
}

int* mul(int* mat1, int r1);
